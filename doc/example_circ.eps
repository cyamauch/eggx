%!PS-Adobe-3.0 EPSF-3.0
%%For: Chisato Yamauchi,,,
%%CreationDate: (2010\307\25701\267\35626\306\374 15\273\37631\312\25454\311\303)
%%Title: example_circ.eps
%%Creator: Skencil 0.6.16
%%Pages: 1
%%BoundingBox: 139 608 457 808
%%Extensions: CMYK
%%DocumentSuppliedResources: (atend)
%%DocumentNeededResources: font Courier
%%EndComments

%%BeginProlog
%%BeginResource: procset Linux-Sketch-Procset 1.0 2
/SketchDict 100 dict def
SketchDict begin
/bd { bind def } bind def
/x { exch } bd
/xd { exch def } bd
/PI 3.14159265358979323846264338327 def
/radgrad { 180 mul PI div } bd
/skstartmatrix matrix currentmatrix def
/tmpmat matrix def
/ISOLatin1Encoding dup where
{ pop pop }
{  [/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /space /exclam /quotedbl /numbersign /dollar /percent /ampersand
/quoteright /parenleft /parenright /asterisk /plus /comma /minus /period
/slash /zero /one /two /three /four /five /six /seven /eight /nine /colon
/semicolon /less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J
/K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /quoteleft /a /b /c /d /e /f /g /h /i
/j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar /braceright
/asciitilde /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /dotlessi /grave /acute /circumflex /tilde /macron /breve
/dotaccent /dieresis /.notdef /ring /cedilla /.notdef /hungarumlaut /ogonek
/caron /space /exclamdown /cent /sterling /currency /yen /brokenbar /section
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen
/registered /macron /degree /plusminus /twosuperior /threesuperior /acute /mu
/paragraph /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
/onequarter /onehalf /threequarters /questiondown /Agrave /Aacute /Acircumflex
/Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute /Ecircumflex
/Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth /Ntilde /Ograve
/Oacute /Ocircumflex /Otilde /Odieresis /multiply /Oslash /Ugrave /Uacute
/Ucircumflex /Udieresis /Yacute /Thorn /germandbls /agrave /aacute
/acircumflex /atilde /adieresis /aring /ae /ccedilla /egrave /eacute
/ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis /eth /ntilde
/ograve /oacute /ocircumflex /otilde /odieresis /divide /oslash /ugrave
/uacute /ucircumflex /udieresis /yacute /thorn /ydieresis] def
}
ifelse
/arct dup where
{pop pop}
{
/arct {arcto pop pop pop pop} bd
}
ifelse
/size 0 def
/fontname 0 def
/newfont 0 def
/sf {
/size xd
/fontname xd
fontname findfont
dup /Encoding get StandardEncoding eq
{
dup
length dict /newfont xd
{
1 index
/FID ne
{ newfont 3 1 roll put }
{ pop pop }
ifelse
} forall
newfont /Encoding ISOLatin1Encoding put
fontname newfont definefont
}
if
size scalefont setfont
} bd
/pusht {matrix currentmatrix} bd
/popt {setmatrix} bd
/pushc {gsave} bd
/popc {grestore} bd
/rgb {setrgbcolor} bd
/w { setlinewidth } bd
/j { setlinejoin } bd
/J { setlinecap } bd
/d { setdash } bd
/F { eofill } bd
/f { closepath F } bd
/S {
pusht
skstartmatrix setmatrix stroke 
popt
} bd
/s { closepath S } bd
/m { moveto } bd
/l { lineto } bd
/c { curveto } bd
/txt {
/tmpmat tmpmat currentmatrix def
dup type /arraytype eq {concat} {translate} ifelse
0 0 m
tmpmat
} bd
/T {txt x show popt} bd
/P {txt x true charpath popt} bd
/TP {txt x dup show 0 0 m true charpath popt} bd
/C {newpath 0 360 arc} bd
/R {
2 copy m
x 2 index l
x 2 index x l
l
closepath
} bd
/ellipse { 
dup type /arraytype eq
{
pusht x concat
0 0 1.0 C 
popt
}	
{
pusht 5 1 roll
4 -1 roll concat
newpath
dup 2 eq {
0 0 m 
} if 
3 1 roll
radgrad x
radgrad x
0 0 1   5 -2 roll
arc
0 ne { closepath } if
popt
}
ifelse
} bd
/radius1 0 def
/radius2 0 def
/factor 0 def
/rect {
dup type /arraytype eq
{
pusht x concat
0 0 m  1 0 l  1 1 l  0 1 l  closepath
popt
}
{
/radius2 xd
/radius1 xd
pusht x concat
radius1 radius2 div  1  scale
0 radius2 m
0 1  radius2 1  radius2  arct
radius2 radius1 div
dup 1  1 index 0  radius2  arct
0  0 0  radius2  arct
0 0  0 1  radius2 arct
closepath
popt
}
ifelse
} bd
/buf 0 def
/width 0 def
/height 0 def
/skcimg {
/tmpmat tmpmat currentmatrix def
{ concat } if
/height xd
/width xd
/buf width 3 mul string def
width height scale
width height 8
[width	 0   0	 height neg	  0  height]
{ currentfile buf readhexstring pop } bind
false 3 colorimage
tmpmat setmatrix
} bd
/skgimg {
/tmpmat tmpmat currentmatrix def
{ concat } if
/height xd
/width xd
/buf width string def
width height scale
width height 8
[width	 0   0	 height neg	  0  height]
{ currentfile buf readhexstring pop } bind
image
tmpmat setmatrix
} bd
/rclip {
4 2 roll m
dup 0 x rlineto
x 0 rlineto
neg 0 x rlineto
closepath
clip
} bd
/skeps {
10 dict begin
/sk_state save def
concat
3 index neg 3 index neg translate
rclip
0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
10 setmiterlimit [ ] 0 setdash
newpath
/sk_dict_count countdictstack def
/sk_count count 1 sub def
userdict begin
/showpage { } def
/languagelevel where
{
pop
languagelevel 1 ne
{
false setstrokeadjust
false setoverprint
} if
} if
} bd 
/skepsend {
count sk_count sub { pop } repeat
countdictstack sk_dict_count sub { end } repeat
sk_state restore
end
} bd
/gradidx 0 def
/gradient { 
3 mul array
/gradidx 0 def
} bd
/$ {
3 index gradidx       5 -1 roll put 
2 index gradidx 1 add 4 -1 roll put 
1 index gradidx 2 add 3 -1 roll put 
/gradidx gradidx 3 add def
} bd
/! { 
3 
{
dup dup gradidx dup 3 1 roll 3 sub get put
/gradidx gradidx 1 add def
}
repeat
} bd
/gradcolor {
3 mul dup 2 add 1 exch	% idx  1  idx+2
{
1 index exch	% array array i
get		% array component
exch		% component array
}
for
4 1 roll
} bd
/x0 0 def /y0 0 def /x1 0 def /y1 0 def
/left 0 def /right 0 def /top 0 def /bottom 0 def
/numcolors 0 def
/axial	{
/y1 xd /x1 xd /y0 xd /x0 xd
dup length 3 idiv /numcolors xd
pusht exch  % ctm array
x0 x1 ne y0 y1 ne or
{
x0 y0 translate
[x1 x0 sub  y1 y0 sub	dup neg    2 index    0	    0] concat
clippath flattenpath pathbbox
/top xd /right xd /bottom xd /left xd
newpath
0 gradcolor rgb clippath f
0 1 numcolors 1 sub
{
dup numcolors div
3 1 roll
gradcolor rgb
exch
bottom right top R f
}
for
}
if 
pop
popt
} bd
/r0 0 def /r1 0 def /dr 0 def
/radial	{
/r1 xd /r0 xd /y0 xd /x0 xd
/dr r1 r0 sub def
dup length 3 idiv /numcolors xd
pusht exch  % ctm array
r0 r1 ne
{
x0 y0 translate
clippath flattenpath pathbbox
/top xd /right xd /bottom xd /left xd
newpath
dr 0 gt {numcolors 1 sub}{0} ifelse gradcolor rgb
clippath f
dr 0 gt {numcolors 1 sub -1 0} { 0 1 numcolors 1 sub} ifelse
{
dup numcolors div dr mul r0 add
3 1 roll
gradcolor rgb
exch
0 0 3 -1 roll C f
}
for
}
if 
pop
popt
} bd
/max {
2 copy lt {exch} if pop
} bd
/conical {
pusht 5 1 roll
3 1 roll /y0 xd /x0 xd
x0 y0 translate
radgrad rotate
dup length 3 idiv /numcolors xd
clippath flattenpath pathbbox newpath
4 { abs 4 1 roll} repeat
3 { max } repeat
2 mul
dup scale
0 gradcolor rgb
0 0 1 0 360 arc f
1 1 numcolors 1 sub
{
dup numcolors div 180 mul
3 1 roll
gradcolor rgb
exch
0 0 moveto
0 0 1  4 -1 roll  dup neg  arc
closepath f
}
for
pop
popt
} bd
/XStep 0 def /YStep 0 def /imagedata 0 def /components 0 def
/tileimage2 {
exch 4 2 roll
/height xd
/width xd
mark
/components 2 index
/PatternType 1
/PaintType 1
/TilingType 1
/BBox [0 0 width height]
/XStep width
/YStep height
/PaintProc {
begin
XStep YStep 8
matrix
imagedata
false
components
colorimage
end
}
counttomark 2 div cvi dup dict begin
{ def } repeat
pop currentdict end
dup
/imagedata
4 -1 roll
width height mul mul string
currentfile exch readhexstring pop
put
exch
makepattern
setpattern
clippath
eofill
} bd
/tileimage1 {
concat
/components xd
/height xd
/width xd
/imagedata
currentfile
width height mul components mul string
readhexstring pop
def
clippath flattenpath pathbbox
/top xd /right xd /bottom xd /left xd
left width div floor width mul
bottom height div floor height mul
translate
top bottom sub height div ceiling cvi
{
gsave
right left sub width div ceiling cvi
{
width height 8 matrix
components 1 eq
{
{ imagedata }
image
}
{
imagedata
false components
colorimage
}
ifelse
width 0 translate
}
repeat
grestore
0 height translate
}
repeat
} bd
/makepattern where
{
pop
/tileimage /tileimage2 load def
}
{
/tileimage /tileimage1 load def
}
ifelse
end
%%EndResource
%%EndProlog

%%BeginSetup
%%IncludeResource: font Courier

10.433 setmiterlimit
%%EndSetup

%%Page: 1 1
SketchDict begin
0 0 642 431 [0.378824 0 0 0.378824 171.952 629.756]
skeps
%%BeginDocument: /home1/cyamauch/tex/machine/EGGX/example_circle.eps3
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMagick 6.1.8
%%Title: example_circle.eps3
%%CreationDate: Tue Jan 26 15:23:01 2010
%%BoundingBox: 0 0 642 431
%%HiResBoundingBox: 0 0 642 431
%%LanguageLevel: 3
%%Pages: 1
%%EndComments
%%BeginProlog
/ByteStreamDecodeFilter
{
  /z exch def
  /r exch def
  /c exch def
  z 0 eq { /ASCII85Decode filter } if
  z 1 eq
  { /ASCII85Decode filter
    <<
      /K -1
      /Columns c
      /Rows r
    >>
    /CCITTFaxDecode filter
  } if
  z 2 eq { /ASCII85Decode filter /DCTDecode filter } if
  z 3 eq { /ASCII85Decode filter /LZWDecode filter } if
  z 4 eq { /ASCII85Decode filter /RunLengthDecode filter } if
  z 5 eq { /ASCII85Decode filter /FlateDecode filter } if
} bind def

/DirectClassImageDict
{
  colorspace 0 eq
  {
    /DeviceRGB setcolorspace
    <<
      /ImageType 1
      /Width columns
      /Height rows
      /BitsPerComponent 8
      /DataSource pixel_stream
      /MultipleDataSources false
      /ImageMatrix [columns 0 0 rows neg 0 rows]
      /Decode [0 1 0 1 0 1]
    >>
  }
  {
    /DeviceCMYK setcolorspace
    <<
      /ImageType 1
      /Width columns
      /Height rows
      /BitsPerComponent 8
      /DataSource pixel_stream
      /MultipleDataSources false
      /ImageMatrix [columns 0 0 rows neg 0 rows]
      /Decode
        compression 2 eq
        { [1 0 1 0 1 0 1 0] }
        { [0 1 0 1 0 1 0 1] }
        ifelse
    >>
  }
  ifelse
} bind def

/PseudoClassImageDict
{
  % Colors in colormap image.
  currentfile buffer readline pop
  token pop /colors exch def pop
  colors 0 eq
  {
    % Depth of grayscale image.
    currentfile buffer readline pop
    token pop /bits exch def pop
    /DeviceGray setcolorspace
    <<
      /ImageType 1
      /Width columns
      /Height rows
      /BitsPerComponent bits
      /Decode [0 1]
      /ImageMatrix [columns 0 0 rows neg 0 rows]
      /DataSource pixel_stream
    >>
  }
  {
    % RGB colormap.
    /colormap colors 3 mul string def
    compression 100 lt
    { currentfile /ASCII85Decode filter colormap readstring pop pop }
    { currentfile colormap readstring pop pop }
    ifelse
    [ /Indexed /DeviceRGB colors 1 sub colormap ] setcolorspace
    <<
      /ImageType 1
      /Width columns
      /Height rows
      /BitsPerComponent 8
      /Decode [0 255]
      /ImageMatrix [columns 0 0 rows neg 0 rows]
      /DataSource pixel_stream
    >>
  }
  ifelse
} bind def

/NonMaskedImageDict
{
  class 1 eq
  { PseudoClassImageDict }
  { DirectClassImageDict }
  ifelse
} bind def

/MaskedImageDict
{
  <<
    /ImageType 3
    /InterleaveType 3
    /DataDict NonMaskedImageDict
    /MaskDict
    <<
      /ImageType 1
      /Width columns
      /Height rows
      /BitsPerComponent 1
      /DataSource mask_stream
      /MultipleDataSources false
      /ImageMatrix [ columns 0 0 rows neg 0 rows]
      /Decode [ 0 1 ]
    >>
  >>
} bind def

/ClipImage
{} def

/DisplayImage
{
  /buffer 512 string def

  % Translation.
  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  x y translate

  % Image size and font size.
  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  currentfile buffer readline pop
  token pop /pointsize exch def pop
  x y scale
  % Clipping path.
  currentfile buffer readline pop
  token pop /clipped exch def pop
  % EPS.
  currentfile buffer readline pop
  token pop /sp exch def pop
  % Image pixel size.
  currentfile buffer readline pop
  token pop /columns exch def
  token pop /rows exch def pop
  % Colorspace (RGB/CMYK).
  currentfile buffer readline pop
  token pop /colorspace exch def pop
  % Transparency.
  currentfile buffer readline pop
  token pop /alpha exch def pop
  % Stencil mask?
  currentfile buffer readline pop
  token pop /stencil exch def pop
  % Image class (direct/pseudo).
  currentfile buffer readline pop
  token pop /class exch def pop
  % Compression type.
  currentfile buffer readline pop
  token pop /compression exch def pop
  % Clip and render.
  /pixel_stream currentfile columns rows compression
    ByteStreamDecodeFilter def
  clipped { ClipImage } if
  alpha stencil not and
  { MaskedImageDict mask_stream resetfile }
  { NonMaskedImageDict }
  ifelse
  stencil { 0 setgray imagemask } { image } ifelse
  grestore
  sp { showpage } if
} bind def
%%EndProlog
%%Page: 1 1
%%PageBoundingBox: 0 0 642 431
/ClipImage {} def
userdict begin
%%BeginData:         4611 ASCII Bytes
DisplayImage
0 0
642 431
12.000000
false
false
642 431
0
false
false
0
5
GhVQ?9rhQ4)9:_79b/7(GNbB4mS"/p5nJ\Z8sDlO<3:iM;JMni7M-6KcZ%ZMl1W5J=_GGJT=
(9ViZ=mCB.#'Rh:t5XVLA=W!/Pn)!4MQQmsje(iICmp0?+i=N7i$i$NKGH59"*k0kRa@/,[_3
rc"If^Q3hiHKngGN%r>>#luV.r/\&=SEKg0f)n.Ke%N[:@uN,U!a8Y"mpCKdT'chDot(&Dh+N
\]`Y`b'kQg#@i:X/&=*+B!D*Z8Os7ORmS7bfT]9eJFmPj0AI'PKH(_`DlTNuE<6N$io^)t_-_
V]h4aa$?U\9l?Mq<g=35-q<Z^eZl.(h80hh`m6PFWKK9rpfr;Q50D]Nut"W;W1[fPSNUmdPL"
"N%R?Co8VL#5$.OIpDRP#1%ibe_I\"rIr"t25g'LarV>dNN2gjkP"0S-kZRZInq2/dg0"A&?[
]+4`Y_Y#PSLocq"ddah[aC'iNM,9i]NtcgqDdr>gh=(A(f57_H.iJq;gsjY<LDP@uRBq7THsF
8Qk"*5PsY,UFP'4jO%4QH1ur&Jd6bqeaJt(Is,=\0kSTHodA2D9?ITkn_4T#1TJ=J9-2>(QZk
Z=ot:Gl\^^Yc)e4g]>L'1^S^kELXRMiGrV:_.<OdCtUUd2lo'Q"#jnFf3jNI99@uN/8bc(P>W
I%3>iQm#PZh'.P09s,8oZX)FGu]<'a=#mDhA:Zb@uN-SZ[!V`J*lH+;HES;a$2`5o9fOY=8.m
W.K9ger(-XC+eO/VH]9c"QqCsW5g'N7r`;<Ech"dKbOe'U98kUF(c*>.AVGX.b9*?hplBCF]u
1atN%ktI>#tFI=$JI[(h:d%;c`[WO+(c$0ufU*k#1102iKK2(pibF"TY8l!5R_r(][H5(][H5
(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][
H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(
][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H
5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(]
[H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5
(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][
H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(][H5(
][H5(][H5(][H5(][H5(l!C/-iN-/ePTbb[8KKE)7ZEXE4Y:D;a3>TUr"shg@/,>K`R*1@@FL
6_!UOt#"DHu>&]F^*TL3%PZ4"P4)23aqWi_;WA'+W8>I1"A\s"t0LsRRD\Ch&<PpPi0ZP;'h?
;IU'kZp1kDD2$G!q&;0=g?+c%0.s@J36$#4b5Lj]%UqOd-6cBi$ArAhTrj->t#+8;4%8Hn<@.
#usi2.OQ*Ln?,)(<1%Fr?/)Bl]heeGVEt?h)/hBCWA(^lL$a03+[q*aMB&F:k930GWJ!JSNUm
E`HR_\u*<1>0(9f)"-I1;JN@+ds;.5(S&SSR7)VBcOPN'[8cSL0\WA"q0qd+MFYUUB"HOfqeG
[@Tq'kUrNqAsosYS%[_99/gsH$6Cr'kSEacKtXWLp/iRAckg&Oa*>!+;JL*NqW!fVQ^aLAl[.
L;0fIO#Sgr7%e[)P^+c/dZQ<3EfK<N.:PDr.'AW^c).lcTf&/Ns_m>(X<1(WbbH:<Q@58R0=U
oJA4Em/^KisL9gbMYI-;\-:iWs$!?n<%).5!;t!6.oF(?,2>YmE+A$8\<l9?BB5E%9(*:+j"l
"Uq3DbiIW$b>uDD.a/lm/W\Nn(d`qEbaG<"%=o=p0[i"c$t2r)T*dB6lcKe4"T#)O'0**&B3V
$a$8[7Fb&FcmHDiN-3NA$LBAa@:AeaEmBl":7V8A2NQ84HEJ\+mKi>bbXYWm)"Kc//NAIeS>[
oA`GS5A@S7;t\L)9Dbe5$J.k<1"gK:R5IVTVTF5iGu4<]*'Dpk!dQBbHauaTu+I`c"'s8$8,;
FIL[]?YZK1K@J[O#XMJ4/7tp3d<3dS""Xb%^QTN<8C_rU@R)^1<en2rfKmCUjA8QJu<1$0\8C
hCn5_ZblH"7jPNQ.qOGI`]L_ktg@($:h"aHl03/Q6(q\Vb4F^<n\Nk*E'hQL#PB;dlggM/:Mh
d4?$pML3G<C`Ubu@BR+qCsU\[//>&C(m8A&BTid%EX>=BHaH@u.Ck,-fKIra_N\:l;X>HA;IM
2J6*b;L%8pUegd&/]+:V4W0&/^tC`j0b@4p>#Z>:Wm;IMTr+>pBYZpoc6\:2rC*mtrAVW7MM"
+*RS<1&^37h+f.X\iLfXrfO*LU9O)3B;N;`&?$X($=TF;%q\T;cK-J]15S3,>D$D:@9/\Z&LS
/KfQ\jeAO8n'G]ckmSOYP85iKTPIj=ZCa2YO@8?5326i,t7>5aRW/[@D*@d#+7r@T<m8.4r4D
J@RBnm&Ui_^XV8NTlg(Q[;&8_TlT\9QNC:=9Ue`l4]2G*7$I0J4ESZ'2O^KlQX]NLcjc.ZB9U
D<rP8:gmTkC1AW*LC3)$;&_Sg4&d%5O4r5Xg7cBnGgs`.dLI#3`M5>7P'3cX/fqF*PI*]2EUf
ueSYR8UN/L2Clm1sp@9bp0@jbuG$KL,C)`pVQ<#?F4g=T!NTu*<>4_eFFBo37=EqcMhD58U1b
fS\9-FT&6W%]TCO.+]jR\IZhgc]C])ek0:F)q#RM/B%;.a6#jUF*F3VPl0rGE83F7[g'gFIYO
0?k6t2$Ia"nW.@+-2(D;?oqM`bOOg?a*S6>jfL&i;_K9$IC1%QdN='ac!0UmqBoi[Ci<GHV")
3i(F5[=dAHQY.$?P/1P%=`0O:"p,#"c(HZq5s#\V-d24kc^KP[$OQllL"A@7i-q.<^b1WA%Bn
6agXnBU0!H`B@aY[Z4t!0N[$s[V+o>Q3q]V8RtKfNL$Ot[p2A1AD_'g$?OBjA4uWUQDlQ^3K.
dlVU7@<jt=-*D:gZ`VntRU4L-k,"tIhA/gP5=A"^\$i^0q/3sI0.%nDfUfIf._0YQ75eml>MU
r'd_WFQJ3$9BY15M)&UfIQ0a0J@H#=dG&!$PhemDC3Q4;/i5G%,l$.'Y=Jo'kR`<PGQnX.&em
&3M+H-Mr9I"1Q_LUI's<`W%c+LU!-qpi0F^+S1D`%p'5K70V^V'9Oi/%/eqt4\!1TC%c!ntN9
-QbQCWRs<1!t3<JIh3cpNMT^g1M2gB'N;Qt`'kL9N&P:PG4VF_(i*!rZ)caW+FZfarCj$8[Gn
b9M04L/;;jEbr9t.psJ7Ag[8<>IFS;;IS^/E[fZH(f#cfKYpI'-GV#ZbYjs<li<!@_CWY0`X]
dd.a3JaiKecc0S'S;/>p!PSi]W@_CWtuDN-"RPGp6OE0f8;=i24/bXrl<(3mtUP7"W;-i2IX?
^OWC=cY(]Cn<<(Vo#OXTfsr%()EU\XNe:>*mYOdU;C`^d681=',IC\Cub>^oN/j[*[3.1L"VV
.^0dHPX?hQnQt*j#Sf4[uL"W&]^+Z&oX@Iu$E7jp%PCcf60Ib:orB)<,RgKhin(^seUOd9\0Q
F7DD*/E_N!`JcB>5LZ"`-baWJ!J;NUmE`HR_]h<$9.A%hU9bD<,)OhK)4b@4L?!7Q9A0L+F(:
=otrYD_KU*KrLS?XMMLUPu(oSkBCbNnn(3g<1(@\O.!Y3:a$Qc?_h36D]2SJL"R\R)9<a#PuD
,b94E3lF'oe`R(\]Q/)Cii&JaFFUrSr)H_eLuan,P.^C\.p?k=(8O;b)r,JQo30GW`cNr#6`U
].it5q5P9NfgGRr$m5[$Ib7&6MbIXjqeGbU;Aafg;$_cK`R*1@5tqB^?s[ArRl`E'o#r=&(LE
m!rJh20\l7^kq=-WNX>kRM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@
'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GN
M@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'
GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM
@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'GNM@'G
Nb$+igl?R)>:JZoKQiI])7bYul^Ks\0V(VNF!^P>rBfl?F.LZ;EW%\4IW%\4IXBOS\V608t!^
P,lBhSKnC]J/&IfT=3h1,~>

%%EndData
end
%%PageTrailer
%%Trailer
%%EOF

%%EndDocument
skepsend
/Courier 12 sf
(\(0,0\))
142.483 612.641 0 0 0 rgb
T
(\(639,399\))
393.068 797.535 T
newpath
170.812 631.25 m
160.812 621.25 l
0.75 w
0 j
0 J
[] 0 d
S
pusht
170.812 631.25 translate
45 rotate
[ ] 0 d
-6 3 m
1 0 l
-6 -3 l
S
popt
newpath
416.478 785.746 m
426.478 795.746 l
S
pusht
416.478 785.746 translate
-135 rotate
[ ] 0 d
-6 3 m
1 0 l
-6 -3 l
S
popt
%%PageTrailer
showpage
%%Trailer
end
%%DocumentSuppliedResources: procset Linux-Sketch-Procset 1.0 2
%%EOF
